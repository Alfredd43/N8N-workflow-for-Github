{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "url": " https://api.github.com/search/repositories",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{$json[\"query\"]}} pushed:>2024-01-01 stars:>1000\n"
            },
            {
              "name": "sort",
              "value": "={{$json[\"sort\"]}}"
            },
            {
              "name": "order",
              "value": "={{$json[\"order\"]}}"
            },
            {
              "name": "per_page",
              "value": "={{$json[\"per_page\"]}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.github.v3+json"
            },
            {
              "name": "User-Agent",
              "value": "AutoGrow-DataScience-Agent"
            },
            {
              "name": "Authorization",
              "value": "token {{$env.GITHUB_TOKEN}}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "ebbb8600-4259-4ba7-abf0-ccd8a4225bfd",
      "name": "Fetch Trending Repos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        500,
        -180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.body.total_count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7949dec6-f652-4c2f-996e-83ed6578e34b",
      "name": "Check Repos Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        -380
      ]
    },
    {
      "parameters": {
        "jsCode": "// Split the items array into individual items for processing\nconst data = $input.all()[0].json;\nconst items = data.body?.items || data.items || [];\n\nif (!items || !Array.isArray(items)) {\n  throw new Error('No items found in the response');\n}\n\nreturn items.map(item => ({ json: item }));"
      },
      "id": "c71c8203-5f9c-4fc6-854a-6e90edf0e4e9",
      "name": "Split Repository Items",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        20
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const repo = $input.item.json;\n\nconst commonTrendingRepos = [\n  'tensorflow/tensorflow',\n  'pytorch/pytorch',\n  'scikit-learn/scikit-learn',\n  'microsoft/vscode',\n  'facebook/react',\n  'vuejs/vue',\n  'openai/openai-python'\n];\n\nif (commonTrendingRepos.includes(repo.full_name)) {\n  return null;\n}\n\nconst now = new Date();\nconst created = new Date(repo.created_at);\nconst updated = new Date(repo.updated_at);\nconst daysSinceCreated = (now - created) / (1000 * 60 * 60 * 24);\nconst daysSinceUpdated = (now - updated) / (1000 * 60 * 60 * 24);\n\nconst createdScore = Math.max(0, 100 - daysSinceCreated);\nconst updatedScore = Math.max(0, 50 - daysSinceUpdated);\nconst activityScore = Math.min(repo.stargazers_count / 10, 50);\nconst freshnessScore = createdScore + updatedScore + activityScore;\n\nconst repoText = `${repo.name} ${repo.description || ''} ${(repo.topics || []).join(' ')}`.toLowerCase();\n\nconst categories = {\n  'breakthrough-research': ['paper', 'research', 'arxiv', 'sota', 'state-of-the-art', 'novel'],\n  'production-tools': ['deployment', 'production', 'scale', 'enterprise', 'docker', 'kubernetes'],\n  'learning-resources': ['tutorial', 'course', 'learn', 'education', 'beginner', 'guide'],\n  'experimental-ai': ['experimental', 'prototype', 'beta', 'alpha', 'demo', 'proof-of-concept'],\n  'data-tools': ['data', 'dataset', 'preprocessing', 'cleaning', 'etl', 'pipeline'],\n  'model-implementations': ['implementation', 'model', 'algorithm', 'neural-network', 'transformer'],\n  'machine-learning': ['ml', 'machine-learning', 'scikit-learn', 'sklearn', 'xgboost', 'lightgbm'],\n  'deep-learning': ['deep-learning', 'neural-network', 'pytorch', 'tensorflow', 'keras', 'jax'],\n  'nlp': ['nlp', 'natural-language', 'transformer', 'bert', 'gpt', 'llm', 'langchain'],\n  'computer-vision': ['computer-vision', 'opencv', 'image-processing', 'yolo', 'segmentation'],\n  'generative-ai': ['stable-diffusion', 'generative', 'gan', 'diffusion', 'dalle']\n};\n\nlet detectedCategory = 'general-ai';\nlet bestScore = 0;\n\nfor (const [category, keywords] of Object.entries(categories)) {\n  const score = keywords.reduce((sum, keyword) => sum + (repoText.includes(keyword) ? 1 : 0), 0);\n  if (score > bestScore) {\n    bestScore = score;\n    detectedCategory = category;\n  }\n}\n\nfunction getStarTier(stars) {\n  if (stars >= 1000) return 'popular';\n  if (stars >= 100) return 'rising';\n  if (stars >= 10) return 'emerging';\n  return 'new';\n}\n\nconst repoData = {\n  name: repo.name,\n  full_name: repo.full_name,\n  description: repo.description || 'No description provided',\n  stars: repo.stargazers_count,\n  forks: repo.forks_count,\n  language: repo.language || 'Multiple',\n  html_url: repo.html_url,\n  topics: repo.topics || [],\n  created_at: repo.created_at,\n  updated_at: repo.updated_at,\n  category: detectedCategory,\n  freshnessScore: freshnessScore,\n  starTier: getStarTier(repo.stargazers_count),\n  ageInDays: Math.floor(daysSinceCreated),\n  owner: {\n    login: repo.owner.login,\n    avatar_url: repo.owner.avatar_url\n  }\n};\n\nconst categoryPrompts = {\n  'breakthrough-research': 'Focus on the research contribution, methodology, and potential impact on the field.',\n  'production-tools': 'Highlight production readiness, scalability, and enterprise features.',\n  'learning-resources': 'Emphasize educational value, learning path, and beginner-friendliness.',\n  'experimental-ai': 'Describe the experimental nature, innovation, and potential applications.',\n  'data-tools': 'Focus on data processing capabilities, efficiency, and integration options.',\n  'model-implementations': 'Explain the model architecture, performance, and implementation details.',\n  'machine-learning': 'Focus on ML algorithms, practical applications, and performance metrics.',\n  'deep-learning': 'Highlight neural network architecture, training methodology, and results.',\n  'nlp': 'Emphasize language processing capabilities and real-world applications.',\n  'computer-vision': 'Describe vision tasks, model performance, and practical applications.',\n  'generative-ai': 'Focus on generative capabilities, model quality, and creative applications.'\n};\n\nconst categoryFocus = categoryPrompts[detectedCategory] || 'Explain the technical innovation and practical applications.';\n\nconst aiPrompt = `As a data science and AI expert, analyze this ${repoData.starTier} ${detectedCategory} repository:\n\nRepository: ${repoData.name}\nCategory: ${detectedCategory}\nDescription: ${repoData.description}\nLanguage: ${repoData.language}\nStars: ${repoData.stars} (${repoData.starTier})\nAge: ${repoData.ageInDays} days\nTopics: ${repoData.topics.join(', ')}\nURL: ${repoData.html_url}\n\n${categoryFocus}\n\nCreate a compelling 2-3 sentence summary that:\n1. Explains what makes this repository special or timely\n2. Highlights why it's valuable for data scientists/ML engineers\n3. Mentions key technical details or innovations\n\nWrite for an audience of data scientists, ML engineers, and AI researchers.`;\n\nreturn {\n  repoData,\n  aiPrompt\n};\n"
      },
      "id": "6394a86c-22fa-401d-909c-35b09223c0f1",
      "name": "Process Repository Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        -480
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// DEBUGGED Format Post Content - Find the Real Issue\nconst inputData = $input.item.json;\n\n// FIRST: Log the entire input structure to see what we're actually getting\nconsole.log('=== INPUT DATA STRUCTURE ===');\nconsole.log('Full input:', JSON.stringify(inputData, null, 2));\nconsole.log('Available keys:', Object.keys(inputData));\n\n// SECOND: More robust data extraction\nlet repo;\nlet aiSummary = 'No AI summary available.';\n\n// Check all possible locations for repo data\nif (inputData.repoData) {\n  console.log('Found repoData');\n  repo = inputData.repoData;\n} else if (inputData.repo) {\n  console.log('Found repo');\n  repo = inputData.repo;\n} else if (inputData.json && inputData.json.repoData) {\n  console.log('Found json.repoData');\n  repo = inputData.json.repoData;\n} else if (inputData.json && inputData.json.repo) {\n  console.log('Found json.repo');\n  repo = inputData.json.repo;\n} else {\n  console.log('No repo data found, checking for raw GitHub API data');\n  \n  // Check if this is raw GitHub API data\n  if (inputData.name && inputData.stargazers_count !== undefined) {\n    console.log('Found raw GitHub API data');\n    repo = {\n      name: inputData.name,\n      full_name: inputData.full_name,\n      description: inputData.description,\n      stars: inputData.stargazers_count,\n      forks: inputData.forks_count,\n      language: inputData.language,\n      html_url: inputData.html_url,\n      topics: inputData.topics || [],\n      category: 'general-ai', // Default category\n      owner: {\n        login: inputData.owner?.login || 'unknown',\n        avatar_url: inputData.owner?.avatar_url || ''\n      }\n    };\n  } else {\n    console.log('Creating fallback repo data');\n    repo = {\n      name: 'Unknown Repo',\n      full_name: 'unknown/unknown',\n      description: 'No description available',\n      stars: 0,\n      forks: 0,\n      language: 'Unknown',\n      html_url: '',\n      topics: [],\n      category: 'general-ai',\n      owner: { login: 'unknown', avatar_url: '' }\n    };\n  }\n}\n\n// THIRD: Extract AI summary from all possible locations\nconsole.log('=== AI SUMMARY EXTRACTION ===');\nif (inputData.generations && Array.isArray(inputData.generations) && inputData.generations.length > 0) {\n  console.log('Found generations array');\n  const gen = inputData.generations[0];\n  if (typeof gen === 'string') {\n    aiSummary = gen;\n  } else if (gen && gen.text) {\n    aiSummary = gen.text;\n  } else {\n    aiSummary = JSON.stringify(gen);\n  }\n} else if (inputData.generation) {\n  console.log('Found generation field');\n  aiSummary = inputData.generation;\n} else if (inputData.text) {\n  console.log('Found text field');\n  aiSummary = inputData.text;\n} else if (inputData.json && inputData.json.generations) {\n  console.log('Found json.generations');\n  const gen = inputData.json.generations[0];\n  aiSummary = gen.text || JSON.stringify(gen);\n} else {\n  console.log('No AI summary found in any location');\n  // Create a basic summary from repo data\n  if (repo.description && repo.description !== 'No description available') {\n    aiSummary = `${repo.description} This repository has ${repo.stars} stars and is written in ${repo.language}.`;\n  } else {\n    aiSummary = `A ${repo.language} repository with ${repo.stars} stars focused on AI/ML development.`;\n  }\n}\n\n// FOURTH: Log final repo data\nconsole.log('=== FINAL REPO DATA ===');\nconsole.log('Repo name:', repo.name);\nconsole.log('Repo stars:', repo.stars);\nconsole.log('Repo language:', repo.language);\nconsole.log('Repo URL:', repo.html_url);\nconsole.log('AI Summary:', aiSummary.substring(0, 10000) + '...');\n\n// Category emoji/tags (your existing code is fine)\nconst categoryEmojis = {\n  'machine-learning': '🤖',\n  'deep-learning': '🧠',\n  'nlp': '💬',\n  'computer-vision': '👁️',\n  'data-science': '📊',\n  'algorithms': '⚡',\n  'ai-automation': '🔄',\n  'generative-ai': '🎨',\n  'general-ai': '🚀'\n};\n\nconst categoryTags = {\n  'machine-learning': ['#MachineLearning', '#ML', '#DataScience'],\n  'deep-learning': ['#DeepLearning', '#NeuralNetworks', '#AI'],\n  'nlp': ['#NLP', '#LLM', '#LanguageModels'],\n  'computer-vision': ['#ComputerVision', '#ImageProcessing', '#CV'],\n  'data-science': ['#DataScience', '#Analytics', '#Python'],\n  'algorithms': ['#Algorithms', '#DSA', '#CodingInterview'],\n  'ai-automation': ['#MLOps', '#Automation', '#AIEngineering'],\n  'generative-ai': ['#GenerativeAI', '#StableDiffusion', '#CreativeAI'],\n  'general-ai': ['#AI', '#Technology', '#Innovation']\n};\n\nconst emoji = categoryEmojis[repo.category] || '🚀';\nconst tags = categoryTags[repo.category] || ['#AI', '#Technology'];\n\n// FIFTH: Create post content with validation\nconst postContent = `${emoji} **Trending in ${(repo.category || 'general-ai').replace('-', ' ').toUpperCase()}**\n\n## ${repo.name || 'Unknown Repo'}\n⭐ **${repo.stars || 0}** stars | 🍴 **${repo.forks || 0}** forks | 💻 **${repo.language || 'N/A'}**\n\n${aiSummary}\n\n🔗 **Repository:** ${repo.html_url || 'URL not available'}\n\n${(repo.topics && repo.topics.length > 0) ? `🏷️ **Tech Stack:** ${repo.topics.slice(0, 6).map(tag => `\\`${tag}\\``).join(' ')}` : ''}\n\n**Why this matters for AI/ML practitioners:**\n• ${repo.category === 'algorithms' ? 'Strengthens DSA fundamentals' : 'Advances state-of-the-art capabilities'}\n• ${repo.category === 'data-science' ? 'Improves data analysis workflows' : 'Enables cutting-edge research applications'}\n• Active development with ${repo.forks || 0} forks showing community adoption\n\n${tags.join(' ')} #OpenSource #GitHub\n\n---\n*🤖 Curated by AutoGrow AI Agent for Data Science & ML Community*`;\n\n// Filename\nconst timestamp = new Date().toISOString().split('T')[0];\nconst filename = `${repo.category || 'general-ai'}-${(repo.name || 'unknown').toLowerCase().replace(/[^a-z0-9]/g, '-')}-${timestamp}.md`;\n\n// FINAL: Return with additional debug info\nconst result = {\n  content: postContent,\n  filename: filename,\n  description: ` ${repo.name || 'Unknown'} - ${aiSummary.substring(0, 800)}...`,\n  repo: repo,\n  debug: {\n    inputKeys: Object.keys(inputData),\n    repoSource: repo.name !== 'Unknown Repo' ? 'found' : 'fallback',\n    summarySource: aiSummary === 'No AI summary available.' ? 'fallback' : 'found'\n  }\n};\n\nconsole.log('=== FINAL RESULT ===');\nconsole.log('Result:', JSON.stringify(result, null, 2));\n\nreturn result;"
      },
      "id": "8957efdb-47b9-4d16-88e8-73cc0d3a276d",
      "name": "Format Post Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        -220
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Preview the content before posting\nconst content = $input.item.json.content;\nconst repo = $input.item.json.repo;\n\n// Create preview with truncated content\nconst preview = {\n  repoName: repo.name,\n  stars: repo.stars,\n  language: repo.language,\n  category: repo.category,\n  contentPreview: content.substring(0, 10000) + '...',\n  fullContent: content,\n  filename: $input.item.json.filename,\n  description: $input.item.json.description,\n  url: repo.html_url,\n  topics: repo.topics\n};\n\nreturn preview;"
      },
      "id": "63ac75c0-95c2-48d2-bf30-34724b6f6d7c",
      "name": "Preview Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Batch Preview for AI/ML repositories with freshness indicators\n\nconst allPosts = $input.all();\n\n// Group posts by category for better organization\nconst groupedPosts = allPosts.reduce((acc, post) => {\n  const category = post.json.category || 'general-ai';\n  if (!acc[category]) acc[category] = [];\n  acc[category].push(post.json);\n  return acc;\n}, {});\n\n// Category emojis\nconst categoryEmojis = {\n  'machine-learning': '🤖',\n  'deep-learning': '🧠',\n  'nlp': '💬',\n  'computer-vision': '👁️',\n  'data-science': '📊',\n  'algorithms': '⚡',\n  'ai-automation': '🔄',\n  'generative-ai': '🎨',\n  'breakthrough-research': '📄',\n  'production-tools': '🛠️',\n  'learning-resources': '📚',\n  'experimental-ai': '🧪',\n  'data-tools': '🗄️',\n  'model-implementations': '🧬',\n  'general-ai': '🚀'\n};\n\n// Freshness badge mapping\nconst freshnessBadges = {\n  'new': '🆕 NEW',\n  'emerging': '📈 EMERGING',\n  'rising': '🔥 RISING',\n  'popular': '⭐ POPULAR'\n};\n\n// Create preview summary text\nconst previewSummary = `📋 Content Preview\n\n🗓️ **Date:** ${new Date().toLocaleDateString()}\n📊 **Total AI/ML Repos Selected:** ${allPosts.length}\n\n${Object.entries(groupedPosts).map(([category, posts]) => {\n  const emoji = categoryEmojis[category] || '🚀';\n\n  return `## ${emoji} ${category.replace('-', ' ').toUpperCase()} (${posts.length} repos)\n\n${posts.map((post, index) => {\n  const badge = freshnessBadges[post.repo?.starTier] || '';\n  return `**${index + 1}. ${post.repo?.name || post.repoName}**\n⭐ ${post.repo?.stars || post.stars} stars | 💻 ${post.repo?.language || post.language} ${badge}\n📝 ${post.contentPreview}\n🔗 [View Repository](${post.repo?.html_url || post.url})`;\n}).join('\\n\\n')}`;\n}).join('\\n\\n')}\n\n🎯 **Focus Areas Detected:**\n${Object.keys(groupedPosts).map(cat => `• ${cat.replace('-', ' ')}`).join('\\n')}\n\n✅ *Click 'Continue' to approve and post all AI/ML content*\n❌ *Click 'Cancel' to skip this batch*\n\n*Curated for data scientists, ML engineers, and AI researchers.*\n`;\n\nreturn {\n  previewSummary: previewSummary,\n  totalPosts: allPosts.length,\n  posts: allPosts,\n  categories: Object.keys(groupedPosts)\n};\n"
      },
      "id": "909c31e5-de4e-4785-a050-2aecccade017",
      "name": "Batch Preview",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2380,
        -420
      ]
    },
    {
      "parameters": {
        "unit": "minutes"
      },
      "id": "c857bc86-b485-42c4-9da6-9369e953b0d5",
      "name": "Batch Approval",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        2540,
        -140
      ],
      "webhookId": "b51260fd-1e8d-44e1-a053-643f672cf751"
    },
    {
      "parameters": {
        "jsCode": "// Process approved posts\nconst posts = $input.first().json.posts;\n\nreturn posts.map(post => ({\n  json: {\n    description: post.description,\n    filename: post.filename,\n    content: post.fullContent,\n    repo: post\n  }\n}));"
      },
      "id": "4736ba08-bf21-4ded-bef0-e6887d0bca7d",
      "name": "Process Approved Posts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        120
      ]
    },
    {
      "parameters": {
        "jsCode": "// Create summary of all processed posts\nconst posts = $input.all();\n\n// Group by category for organized summary\nconst categoryGroups = posts.reduce((acc, post) => {\n  const category = post.json.repo.json.category || 'general-ai';\n  if (!acc[category]) acc[category] = [];\n  acc[category].push(post);\n  return acc;\n}, {});\n\n// Emoji mapping for categories\nconst categoryEmojis = {\n  'machine-learning': '🤖',\n  'deep-learning': '🧠',\n  'nlp': '💬',\n  'computer-vision': '👁️',\n  'data-science': '📊',\n  'algorithms': '⚡',\n  'ai-automation': '🔄',\n  'generative-ai': '🎨',\n  'general-ai': '🚀'\n};\n\n// Build the Markdown summary\nconst summaryContent = `\n# 🧠 Daily AI & Machine Learning Highlights – ${new Date().toLocaleDateString()}\n\n\n\n📊 **Today’s Overview:**  \n${posts.length} popular repositories across ${Object.keys(categoryGroups).length} categories.\n\n${Object.entries(categoryGroups).map(([category, repos]) => {\n  const emoji = categoryEmojis[category] || '🚀';\n  return `\n## ${emoji} ${category.replace('-', ' ').toUpperCase()}\n\n${repos.map((post, index) => {\n  const repo = post.json.repo.json;\n  const repoName = repo.repoName || repo.name || 'Unnamed Project';\n  const repoDesc = repo.description && repo.description.trim() ? repo.description : 'No description provided.';\n  const repoStars = repo.stars !== undefined ? repo.stars : 0;\n  const repoLang = repo.language || 'Multiple';\n  const repoUrl = repo.url || repo.html_url || 'https://github.com';\n  const topics = (repo.topics && repo.topics.length > 0)\n    ? repo.topics.slice(0, 4).map(t => `\\`${t}\\``).join(' ')\n    : '_No topics listed_';\n\n  return `\n### ${index + 1}. [${repoName}](${repoUrl})\n⭐ **${repoStars} stars** | 💻 **${repoLang}**\n\n${repoDesc}\n\n🏷️ Topics: ${topics}\n\n---\n`;\n}).join('\\n')}\n`;\n}).join('\\n')}\n\n## 🎯 Key Insights\n\n• **Most Active Category:** ${Object.entries(categoryGroups).sort((a, b) => b[1].length - a[1].length)[0][0].replace('-', ' ')}  \n• **Total Stars Collected:** ${posts.reduce((sum, post) => sum + (post.json.repo.json.stars || 0), 0)}  \n• **Languages Featured:** ${[...new Set(posts.map(p => p.json.repo.json.language || 'Multiple'))].join(', ')}\n\n## 🚀 Explore & Contribute\n\nThese projects reflect the latest trends and ideas in AI and data science. Whether you’re building new models, exploring NLP, or contributing to open-source, there’s plenty to learn and try.\n\n---\n\n*💡 Follow for daily updates on trending AI, ML, and data science repositories.*\n\n#MachineLearning #DeepLearning #NLP #AI #OpenSource #DataScience\n`;\n\nreturn {\n  summaryContent,\n  totalRepos: posts.length,\n  categories: Object.keys(categoryGroups)\n};\n"
      },
      "id": "c509053e-daf8-4fe9-b4c2-52da901fc2d8",
      "name": "Create Daily Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2840,
        -340
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log workflow completion\nconst summary = $input.item.json;\n\nconst logMessage = `AutoGrow Workflow Completed Successfully!\n\nTotal Repositories Processed: ${summary.totalRepos}\nCategories: ${Array.isArray(summary.categories) ? summary.categories.join(', ') : 'N/A'}\nTimestamp: ${new Date().toISOString()}\n\n🎉 Daily AI/ML trends curated successfully!`;\n\nconsole.log(logMessage);\n\nreturn {\n  success: true,\n  message: logMessage,\n  summary: summary\n};"
      },
      "id": "a47b0a36-ce9f-4df2-86ab-67787ff1e48f",
      "name": "Workflow Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3320,
        -200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key={{$env.GEMINI_API_KEY}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    \"contents\": [\n      {\n        \"parts\": [\n          {\n            \"text\": $json.aiPrompt\n          }\n        ]\n      }\n    ],\n    \"generationConfig\": {\n      \"temperature\": 0.7,\n      \"maxOutputTokens\": 300\n    }\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1180,
        -160
      ],
      "id": "327728f6-782e-4ba0-91f5-c31acaa564dc",
      "name": "Gemini 1.5 Request"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const repoData = $input.item.json.repoData;\nconst aiPrompt = $input.item.json.aiPrompt;\nconst geminiResponse = $input.item.json;\n\n// Safely extract the generated text from the Gemini API response\nconst summaryText = geminiResponse.candidates?.[0]?.content?.parts?.[0]?.text || 'AI summary could not be generated.';\n\n// Return the data in the format expected by the next node (\"Format Post Content\")\nreturn {\n  repoData,\n  aiPrompt,\n  generations: [{ text: summaryText }]\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1660,
        -80
      ],
      "id": "da1d3a71-6014-4aa1-a311-db2840de012c",
      "name": "Process Gemini Response"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1440,
        -180
      ],
      "id": "4e2f427d-cfcc-427e-be9b-17a3ed18df98",
      "name": "Merge"
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "drago-Codes",
          "mode": "list",
          "cachedResultName": "drago-Codes",
          "cachedResultUrl": "https://github.com/drago-Codes"
        },
        "repository": {
          "__rl": true,
          "value": "daily-ai-trends",
          "mode": "list",
          "cachedResultName": "daily-ai-trends",
          "cachedResultUrl": "https://github.com/drago-Codes/daily-ai-trends"
        },
        "filePath": "={{new Date().toISOString().split('T')[0]}}-ai-ml-digest.md",
        "fileContent": "={{$json[\"summaryContent\"]}}",
        "commitMessage": "=Add daily AI/ML digest for {{new Date().toLocaleDateString()}}",
        "additionalParameters": {
          "branch": {
            "branch": "main"
          }
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        3080,
        -400
      ],
      "id": "d39860b2-7f3a-43ab-bb85-2b1eaa368673",
      "name": "Create a file",
      "webhookId": "844b3147-8ff2-4863-aeb4-f1c8d36978f0",
      "credentials": {
        "githubApi": {
          "id": "O9ekqx7ANywKtUzn",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -100,
        -180
      ],
      "id": "d94f5d7a-09ec-4820-be7e-0a9a5c4c8890",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "const today = new Date();\nconst dayOfWeek = today.getDay();\n\nfunction getDateDaysAgo(days) {\n  const date = new Date();\n  date.setDate(date.getDate() - days);\n  return date.toISOString().split('T')[0];\n}\n\nconst searchStrategies = [\n  `created:>${getDateDaysAgo(900)} (machine-learning OR scikit-learn OR pytorch) stars:>5000`,\n  `pushed:>${getDateDaysAgo(940)} (nlp OR transformer OR llm) stars:>5000`,\n  `created:>${getDateDaysAgo(900)} (computer-vision OR opencv OR yolo) stars:>5000`,\n  `created:>${getDateDaysAgo(950)} (data-science OR pandas OR jupyter) stars:>5000`,\n  `pushed:>${getDateDaysAgo(910)} (ai OR \"artificial intelligence\") stars:>25`,\n  `created:>${getDateDaysAgo(900)} (stable-diffusion OR \"generative ai\") stars:>5000`,\n  `created:>${getDateDaysAgo(900)} (paper OR research OR arxiv) stars:>5000`\n];\n\nconst sortOptions = ['stars', 'updated', 'created', 'forks'];\n\nconst selectedQuery = searchStrategies[dayOfWeek % searchStrategies.length];\nconst selectedSort = sortOptions[dayOfWeek % sortOptions.length];\n\nreturn [\n  {\n    json: {\n      query: selectedQuery,\n      sort: selectedSort,\n      order: 'desc',\n      per_page: 25\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        -180
      ],
      "id": "c6e568e4-0d60-47c7-8873-12417b3c7eab",
      "name": "Generate Dynamic Query"
    },
    {
      "parameters": {
        "jsCode": "const allPosts = $input.all();\n\nconst categoryCount = {};\nconst languageCount = {};\nconst starTierCount = {};\n\nconst diversifiedPosts = [];\n\nconst sortedPosts = allPosts.sort(\n  (a, b) => (b.json.repo?.freshnessScore || 0) - (a.json.repo?.freshnessScore || 0)\n);\n\nfor (const post of sortedPosts) {\n  const category = post.json.category || 'general-ai';\n  const language = post.json.repo?.language || 'Other';\n  const starTier = post.json.repo?.starTier || 'new';\n\n  const maxPerCategory = 3;\n  const maxPerLanguage = 4;\n  const maxPerTier = 5;\n\n  if ((categoryCount[category] || 0) < maxPerCategory &&\n      (languageCount[language] || 0) < maxPerLanguage &&\n      (starTierCount[starTier] || 0) < maxPerTier &&\n      diversifiedPosts.length < 12) {\n\n    categoryCount[category] = (categoryCount[category] || 0) + 1;\n    languageCount[language] = (languageCount[language] || 0) + 1;\n    starTierCount[starTier] = (starTierCount[starTier] || 0) + 1;\n\n    diversifiedPosts.push(post);\n  }\n}\n\nreturn diversifiedPosts;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        0
      ],
      "id": "238f956b-204b-43c7-ab5f-f64f4a32b6d6",
      "name": "Diversity Filter"
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "Alfredd43",
          "mode": "list",
          "cachedResultName": "Alfredd43",
          "cachedResultUrl": "https://github.com/Alfredd43"
        },
        "repository": {
          "__rl": true,
          "value": "Daily-ai-digest",
          "mode": "list",
          "cachedResultName": "Daily-ai-digest",
          "cachedResultUrl": "https://github.com/Alfredd43/Daily-ai-digest"
        },
        "filePath": "={{new Date().toISOString().split('T')[0]}}-ai-ml-digest.md",
        "fileContent": "={{$json[\"summaryContent\"]}}",
        "commitMessage": "=Add daily AI/ML digest for {{new Date().toLocaleDateString()}}",
        "additionalParameters": {
          "branch": {
            "branch": "main"
          }
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        3060,
        -20
      ],
      "id": "e53b7d2e-fa63-4042-afc6-b5a5025ebabc",
      "name": "Create a file1",
      "webhookId": "844b3147-8ff2-4863-aeb4-f1c8d36978f0",
      "credentials": {
        "githubApi": {
          "id": "qp51OIF8fEhwWG32",
          "name": "GitHub account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Fetch Trending Repos": {
      "main": [
        [
          {
            "node": "Check Repos Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Repos Found": {
      "main": [
        [
          {
            "node": "Split Repository Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Repository Items": {
      "main": [
        [
          {
            "node": "Process Repository Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Repository Data": {
      "main": [
        [
          {
            "node": "Gemini 1.5 Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Post Content": {
      "main": [
        [
          {
            "node": "Preview Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preview Content": {
      "main": [
        [
          {
            "node": "Diversity Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Preview": {
      "main": [
        [
          {
            "node": "Batch Approval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Approval": {
      "main": [
        [
          {
            "node": "Process Approved Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Approved Posts": {
      "main": [
        [
          {
            "node": "Create Daily Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Daily Summary": {
      "main": [
        [
          {
            "node": "Create a file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create a file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 1.5 Request": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Process Gemini Response": {
      "main": [
        [
          {
            "node": "Format Post Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Process Gemini Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a file": {
      "main": [
        [
          {
            "node": "Workflow Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Generate Dynamic Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Dynamic Query": {
      "main": [
        [
          {
            "node": "Fetch Trending Repos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Diversity Filter": {
      "main": [
        [
          {
            "node": "Batch Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a file1": {
      "main": [
        [
          {
            "node": "Workflow Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "61dfa08c-6f84-427a-848b-f91787fed957",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "77858412305bae041473ec0bd52a1d59405fcc5d0ca00e001d197812f675b5b9"
  },
  "id": "SHIxFt4ZxbEo8IuU",
  "tags": []
}